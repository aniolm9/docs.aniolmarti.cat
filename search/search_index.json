{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home In this site I keep some documentation I gathered over the time. I try to keep everything up to date, but it isn't always possible. What can I find? Mostly operating systems related documentation and some other tech and geek stuff. What should I do if I see an error? You can e-mail me at aniol@aniolmarti.cat and I'll fix it. Other sites My personal site: https://www.aniolmarti.cat","title":"Home"},{"location":"#home","text":"In this site I keep some documentation I gathered over the time. I try to keep everything up to date, but it isn't always possible.","title":"Home"},{"location":"#what-can-i-find","text":"Mostly operating systems related documentation and some other tech and geek stuff.","title":"What can I find?"},{"location":"#what-should-i-do-if-i-see-an-error","text":"You can e-mail me at aniol@aniolmarti.cat and I'll fix it.","title":"What should I do if I see an error?"},{"location":"#other-sites","text":"My personal site: https://www.aniolmarti.cat","title":"Other sites"},{"location":"license/","text":"License Attribution-ShareAlike 4.0 International Creative Commons Corporation (\u201cCreative Commons\u201d) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \u201cas-is\u201d basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC-licensed material, or material used under an exception or limitation to copyright. More considerations for licensors . Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor\u2019s permission is not necessary for any reason\u2013for example, because of any applicable exception or limitation to copyright\u2013then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public . Creative Commons Attribution-ShareAlike 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 \u2013 Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. BY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses , approved by Creative Commons as essentially the equivalent of this Public License. d. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. e. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. f. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. g. License Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike. h. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. i. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. j. Licensor means the individual(s) or entity(ies) granting rights under this Public License. k. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. l. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. m. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 \u2013 Scope. a. License grant. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: A. reproduce and Share the Licensed Material, in whole or in part; and B. produce, reproduce, and Share Adapted Material. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. Term. The term of this Public License is specified in Section 6(a). Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material. Downstream recipients. A. Offer from the Licensor \u2013 Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. B. Additional offer from the Licensor \u2013 Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter\u2019s License You apply. C. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. Patent and trademark rights are not licensed under this Public License. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties. Section 3 \u2013 License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. If You Share the Licensed Material (including in modified form), You must: A. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. b. ShareAlike. In addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply. The Adapter\u2019s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License. You must include the text of, or the URI or hyperlink to, the Adapter's License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter's License You apply. Section 4 \u2013 Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 \u2013 Disclaimer of Warranties and Limitation of Liability. a. Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You. b. To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 \u2013 Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 \u2013 Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 \u2013 Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.","title":"License"},{"location":"license/#license","text":"","title":"License"},{"location":"license/#attribution-sharealike-40-international","text":"Creative Commons Corporation (\u201cCreative Commons\u201d) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \u201cas-is\u201d basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.","title":"Attribution-ShareAlike 4.0 International"},{"location":"license/#using-creative-commons-public-licenses","text":"Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC-licensed material, or material used under an exception or limitation to copyright. More considerations for licensors . Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor\u2019s permission is not necessary for any reason\u2013for example, because of any applicable exception or limitation to copyright\u2013then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public .","title":"Using Creative Commons Public Licenses"},{"location":"license/#creative-commons-attribution-sharealike-40-international-public-license","text":"By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.","title":"Creative Commons Attribution-ShareAlike 4.0 International Public License"},{"location":"license/#section-1-definitions","text":"a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. BY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses , approved by Creative Commons as essentially the equivalent of this Public License. d. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. e. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. f. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. g. License Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike. h. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. i. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. j. Licensor means the individual(s) or entity(ies) granting rights under this Public License. k. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. l. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. m. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.","title":"Section 1 \u2013 Definitions."},{"location":"license/#section-2-scope","text":"a. License grant. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: A. reproduce and Share the Licensed Material, in whole or in part; and B. produce, reproduce, and Share Adapted Material. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. Term. The term of this Public License is specified in Section 6(a). Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material. Downstream recipients. A. Offer from the Licensor \u2013 Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. B. Additional offer from the Licensor \u2013 Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter\u2019s License You apply. C. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. Patent and trademark rights are not licensed under this Public License. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.","title":"Section 2 \u2013 Scope."},{"location":"license/#section-3-license-conditions","text":"Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. If You Share the Licensed Material (including in modified form), You must: A. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. b. ShareAlike. In addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply. The Adapter\u2019s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License. You must include the text of, or the URI or hyperlink to, the Adapter's License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter's License You apply.","title":"Section 3 \u2013 License Conditions."},{"location":"license/#section-4-sui-generis-database-rights","text":"Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.","title":"Section 4 \u2013 Sui Generis Database Rights."},{"location":"license/#section-5-disclaimer-of-warranties-and-limitation-of-liability","text":"a. Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You. b. To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.","title":"Section 5 \u2013 Disclaimer of Warranties and Limitation of Liability."},{"location":"license/#section-6-term-and-termination","text":"a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License.","title":"Section 6 \u2013 Term and Termination."},{"location":"license/#section-7-other-terms-and-conditions","text":"a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.","title":"Section 7 \u2013 Other Terms and Conditions."},{"location":"license/#section-8-interpretation","text":"a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.","title":"Section 8 \u2013 Interpretation."},{"location":"ALAR/CSGO-dedicated-server/","text":"Counter Strike: Global Offensive dedicated server In order to install and configure a CSGO server you need SteamCMD. Installing SteamCMD sudo -i apt install lib32gcc1 libstdc++6 lib32stdc++6 adduser --system steam mkdir -p /srv/games chown -R steam:root /srv/games su --shell /bin/bash steam cd ~ wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz tar xvzf steamcmd_linux.tar.gz chmod +x steamcmd.sh ./steamcmd.sh Now we'll have to wait until Steam> appears. Downloading the CSGO server It's about 10GB of data, so if your connection is not fast, good luck. In SteamCMD: login anonymous force_install_dir /srv/games/csgo_1 app_update 740 validate The number 740 stands for the CSGO server. You can see all the available applications here . When it finishes it will print the message App '740' fully installed . To exit SteamCMD just type quit . Booting the server We will boot the server process using screen . If you are physically connected to the server you can just boot it in a tty. Using screen : apt install screen script /dev/null screen -S CSGO1 cd /srv/games/csgo_1 Casual: ./srcds_run -game csgo -console -usercon +game_type 0 +game_mode 0 +mapgroup mg_active +map de_dust2 Classic Competitive: ./srcds_run -game csgo -console -usercon +game_type 0 +game_mode 1 +mapgroup mg_active +map de_dust2 Arms Race: ./srcds_run -game csgo -console -usercon +game_type 1 +game_mode 0 +mapgroup mg_armsrace +map ar_shoots Demolition: ./srcds_run -game csgo -console -usercon +game_type 1 +game_mode 1 +mapgroup mg_demolition +map de_lake Disable bots: Add -nobots . Change port: Add port 27016 . Enable logging: : Add -condebug . To detach screen type Ctrl+A+D. To attach again screen -r CSGO1 . Sources Valve Wiki","title":"Counter Strike: Global Offensive dedicated server"},{"location":"ALAR/CSGO-dedicated-server/#counter-strike-global-offensive-dedicated-server","text":"In order to install and configure a CSGO server you need SteamCMD.","title":"Counter Strike: Global Offensive dedicated server"},{"location":"ALAR/CSGO-dedicated-server/#installing-steamcmd","text":"sudo -i apt install lib32gcc1 libstdc++6 lib32stdc++6 adduser --system steam mkdir -p /srv/games chown -R steam:root /srv/games su --shell /bin/bash steam cd ~ wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz tar xvzf steamcmd_linux.tar.gz chmod +x steamcmd.sh ./steamcmd.sh Now we'll have to wait until Steam> appears.","title":"Installing SteamCMD"},{"location":"ALAR/CSGO-dedicated-server/#downloading-the-csgo-server","text":"It's about 10GB of data, so if your connection is not fast, good luck. In SteamCMD: login anonymous force_install_dir /srv/games/csgo_1 app_update 740 validate The number 740 stands for the CSGO server. You can see all the available applications here . When it finishes it will print the message App '740' fully installed . To exit SteamCMD just type quit .","title":"Downloading the CSGO server"},{"location":"ALAR/CSGO-dedicated-server/#booting-the-server","text":"We will boot the server process using screen . If you are physically connected to the server you can just boot it in a tty. Using screen : apt install screen script /dev/null screen -S CSGO1 cd /srv/games/csgo_1 Casual: ./srcds_run -game csgo -console -usercon +game_type 0 +game_mode 0 +mapgroup mg_active +map de_dust2 Classic Competitive: ./srcds_run -game csgo -console -usercon +game_type 0 +game_mode 1 +mapgroup mg_active +map de_dust2 Arms Race: ./srcds_run -game csgo -console -usercon +game_type 1 +game_mode 0 +mapgroup mg_armsrace +map ar_shoots Demolition: ./srcds_run -game csgo -console -usercon +game_type 1 +game_mode 1 +mapgroup mg_demolition +map de_lake Disable bots: Add -nobots . Change port: Add port 27016 . Enable logging: : Add -condebug . To detach screen type Ctrl+A+D. To attach again screen -r CSGO1 .","title":"Booting the server"},{"location":"ALAR/CSGO-dedicated-server/#sources","text":"Valve Wiki","title":"Sources"},{"location":"debian/basic-configuration/","text":"Basic configuration Obviously, using non-free and contrib repos and installing Java and the kernel from backports is not needed, but may be useful, so I'm keeping it here. Sudo Install the package: su apt install sudo Add a user: adduser <user> sudo Repositories Install vim: sudo apt install vim sudo vim /etc/apt/sources.list Delete everything and add: ## Official deb http://ftp.caliu.cat/debian/ stretch main contrib non-free deb-src http://ftp.caliu.cat/debian/ stretch main contrib non-free ## Updates deb http://security.debian.org/ stretch/updates main deb-src http://security.debian.org/ stretch/updates main deb http://ftp.caliu.cat/debian/ stretch-updates main deb-src http://ftp.caliu.cat/debian/ stretch-updates main ## Backports deb http://http.debian.net/debian stretch-backports main I'm using Caliu.cat repos as they are the nearest to my location. Update: sudo apt update Install build-essentials and git: sudo apt install linux-headers-$(uname -r) build-essential checkinstall make automake cmake autoconf git git-core Compressor: sudo apt install rar unrar p7zip-full p7zip-rar Update and upgrade: sudo apt update sudo apt upgrade Installing the kernel from backports Check for new versions: sudo apt-cache search linux-image Install the kernel: sudo apt -t stretch-backports install <linux-image> Installing Java Add the repos: echo \"## Java\" >> /etc/apt/sources.list.d/java echo \"deb http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main\" >> /etc/apt/sources.list.d/java echo \"deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main\" >> /etc/apt/sources.list.d/java Install the key: sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 Update: sudo apt update Install Java: sudo apt install oracle-java8-installer","title":"Basic configuration"},{"location":"debian/basic-configuration/#basic-configuration","text":"Obviously, using non-free and contrib repos and installing Java and the kernel from backports is not needed, but may be useful, so I'm keeping it here.","title":"Basic configuration"},{"location":"debian/basic-configuration/#sudo","text":"Install the package: su apt install sudo Add a user: adduser <user> sudo","title":"Sudo"},{"location":"debian/basic-configuration/#repositories","text":"Install vim: sudo apt install vim sudo vim /etc/apt/sources.list Delete everything and add: ## Official deb http://ftp.caliu.cat/debian/ stretch main contrib non-free deb-src http://ftp.caliu.cat/debian/ stretch main contrib non-free ## Updates deb http://security.debian.org/ stretch/updates main deb-src http://security.debian.org/ stretch/updates main deb http://ftp.caliu.cat/debian/ stretch-updates main deb-src http://ftp.caliu.cat/debian/ stretch-updates main ## Backports deb http://http.debian.net/debian stretch-backports main I'm using Caliu.cat repos as they are the nearest to my location. Update: sudo apt update Install build-essentials and git: sudo apt install linux-headers-$(uname -r) build-essential checkinstall make automake cmake autoconf git git-core Compressor: sudo apt install rar unrar p7zip-full p7zip-rar Update and upgrade: sudo apt update sudo apt upgrade","title":"Repositories"},{"location":"debian/basic-configuration/#installing-the-kernel-from-backports","text":"Check for new versions: sudo apt-cache search linux-image Install the kernel: sudo apt -t stretch-backports install <linux-image>","title":"Installing the kernel from backports"},{"location":"debian/basic-configuration/#installing-java","text":"Add the repos: echo \"## Java\" >> /etc/apt/sources.list.d/java echo \"deb http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main\" >> /etc/apt/sources.list.d/java echo \"deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main\" >> /etc/apt/sources.list.d/java Install the key: sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 Update: sudo apt update Install Java: sudo apt install oracle-java8-installer","title":"Installing Java"},{"location":"debian/building-a-package/","text":"Building a package Implementing a chroot with Sid: https://perl-team.pages.debian.net/autopkgtest.html#SETUP In the host File ~/.sbuildrc : $maintainer_name='Name Surname <email@example.com>'; $distribution = \"unstable\"; $chroot = \"sid-amd64-sbuild\"; $build_arch_all = 1; $purge_build_directory = 'successful'; $purge_session = 'successful'; $purge_build_deps = 'successful'; $build_source = 1; $source_only_changes = 1; 1; File `~/.devscripts: DEBSIGN_KEYID=\"0x40-CHARS-GPG-KEY-ID\" In the chroot Install: sudo apt install --no-install-recommends devscripts debhelper pbuilder git vim build-essential dh-make dh-python python3-setuptools lintian quilt autopkgtest eatmydata blhc File ~/.lintianrc: profile=debian pedantic=yes display-experimental=yes verbose=yes display-info=yes File ~/.pbuilderrc and /root/.pbuilderrc : APTCACHE=/var/cache/pbuilder/aptcache ARCHITECTURE=$(dpkg --print-architecture) AUTO_DEBSIGN=no BUILDRESULT=/build DEBEMAIL=\"Name Surname <email@example.com>\" DISTRIBUTION=sid MIRRORSITE=http://deb.debian.org/debian EATMYDATA=yes Export DEBEMAIL : echo 'DEBEMAIL=\"Name Surname <email@example.com>\"' > /etc/profile.d/01-debemail.sh echo \"export DEBEMAIL\" >> /etc/profile.d/01-debemail.sh Set Quilt patches path: echo \"QUILT_PATCHES=debian/patches\" > /home/<user>/.quiltrc chown <user>:<user> /home/<user>/.quiltrc Create the environment: pbuilder create From now on, when we need to build a package we will just have to enter in a chroot running schroot -c sid-amd64-sbuild . Inside the directory with the source code of the package: sudo pbuilder update && pdebuild The resulting files will be in /build . /build can be found in the host system in /var/lib/sbuild/build . Run a test If there are tests configured in debian/tests you can test them with: sudo autopkgtest -- null Export Display In the host: xhost +local: In the chroot: export DISPLAY=:0 Check package reproducibility Install eatmydata and reprotest in the host: sudo apt install eatmydata reprotest Then, to check if a package is reproducible, run the following command inside the package directory: sudo eatmydata reprotest --vary=domain_host.use_sudo=1 --auto-build . --min-cpu $(nproc) -- schroot sid-amd64-sbuild The --auto-build argument will try to find the cause of the difference if the package is not reproducible. Configure Salsa CI First read the Salsa CI Team documentation to activate it: https://salsa.debian.org/salsa-ci-team/pipeline Setting up a pristine-tar branch Create a upstream/<version> branch with the content of the upstream file (usually a .tar.gz). Rename the upstream package to <package>_<version>.orig.tar.gz . Create and push the pristine-tar branch: pristine-tar commit <package>_<version>.orig.tar.gz upstream/<version> git push -u origin pristine-tar Creating the Git Build Package configuration file Create the file debian/gbp.conf with the following content: [DEFAULT] pristine-tar = True Commit and push the changes. Forward patches to upstream Based on the Perl Team documentation: https://perl-team.pages.debian.net/forward.html Install Perl Team packaging tools: sudo apt install pkg-perl-tools Create the file debian/upstream/metadata with the following content: Name: <PROJECT NAME> Archive: GitHub Repository: https://github.com/<AUTHOR>/<REPO>.git Repository-Browse: https://github.com/<AUTHOR>/<REPO> Bug-Database: https://github.com/<AUTHOR>/<REPO>/issues Bug-Submit: https://github.com/<AUTHOR>/<REPO>/issues/new Create the file ~/.dpt.conf with the following content: DPT_GITHUB_ORGNAME=<ORGANIZATION NAME> DPT_GITHUB_OAUTH=<PERSONAL ACCESS TOKEN> DPT_GITHUB_BRANCH=pkg-debian-$(date +%s) To forward the patch just run: dpt forward debian/patches/<PATCH FILE> Uploading a package In your host run the following command inside the package directory: sbuild -s -d unstable -c sid-amd64-sbuild --source-only-changes Sign the package: debsign <package>_<version>_source.changes Upload the package: dput <package>_<version>_source.changes Using pdebuild If we just want to use pbuilder without sbuild we first create the base: sudo pbuilder create --mirror http://deb.debian.org/debian --distribution sid In order to install packages inside the chroot we can use: sudo pbuilder --login --save-after-login To build a package, from its source directory run: sudo pdebuild --use-pdebuild-internal This command places the binary in /var/cache/pbuilder/result . Finally, to obtain the source-only files: sudo pbuilder --build --source-only-changes <package>_<version>.dsc","title":"Building a package"},{"location":"debian/building-a-package/#building-a-package","text":"Implementing a chroot with Sid: https://perl-team.pages.debian.net/autopkgtest.html#SETUP","title":"Building a package"},{"location":"debian/building-a-package/#in-the-host","text":"File ~/.sbuildrc : $maintainer_name='Name Surname <email@example.com>'; $distribution = \"unstable\"; $chroot = \"sid-amd64-sbuild\"; $build_arch_all = 1; $purge_build_directory = 'successful'; $purge_session = 'successful'; $purge_build_deps = 'successful'; $build_source = 1; $source_only_changes = 1; 1; File `~/.devscripts: DEBSIGN_KEYID=\"0x40-CHARS-GPG-KEY-ID\"","title":"In the host"},{"location":"debian/building-a-package/#in-the-chroot","text":"Install: sudo apt install --no-install-recommends devscripts debhelper pbuilder git vim build-essential dh-make dh-python python3-setuptools lintian quilt autopkgtest eatmydata blhc File ~/.lintianrc: profile=debian pedantic=yes display-experimental=yes verbose=yes display-info=yes File ~/.pbuilderrc and /root/.pbuilderrc : APTCACHE=/var/cache/pbuilder/aptcache ARCHITECTURE=$(dpkg --print-architecture) AUTO_DEBSIGN=no BUILDRESULT=/build DEBEMAIL=\"Name Surname <email@example.com>\" DISTRIBUTION=sid MIRRORSITE=http://deb.debian.org/debian EATMYDATA=yes Export DEBEMAIL : echo 'DEBEMAIL=\"Name Surname <email@example.com>\"' > /etc/profile.d/01-debemail.sh echo \"export DEBEMAIL\" >> /etc/profile.d/01-debemail.sh Set Quilt patches path: echo \"QUILT_PATCHES=debian/patches\" > /home/<user>/.quiltrc chown <user>:<user> /home/<user>/.quiltrc Create the environment: pbuilder create From now on, when we need to build a package we will just have to enter in a chroot running schroot -c sid-amd64-sbuild . Inside the directory with the source code of the package: sudo pbuilder update && pdebuild The resulting files will be in /build . /build can be found in the host system in /var/lib/sbuild/build .","title":"In the chroot"},{"location":"debian/building-a-package/#run-a-test","text":"If there are tests configured in debian/tests you can test them with: sudo autopkgtest -- null","title":"Run a test"},{"location":"debian/building-a-package/#export-display","text":"In the host: xhost +local: In the chroot: export DISPLAY=:0","title":"Export Display"},{"location":"debian/building-a-package/#check-package-reproducibility","text":"Install eatmydata and reprotest in the host: sudo apt install eatmydata reprotest Then, to check if a package is reproducible, run the following command inside the package directory: sudo eatmydata reprotest --vary=domain_host.use_sudo=1 --auto-build . --min-cpu $(nproc) -- schroot sid-amd64-sbuild The --auto-build argument will try to find the cause of the difference if the package is not reproducible.","title":"Check package reproducibility"},{"location":"debian/building-a-package/#configure-salsa-ci","text":"First read the Salsa CI Team documentation to activate it: https://salsa.debian.org/salsa-ci-team/pipeline","title":"Configure Salsa CI"},{"location":"debian/building-a-package/#setting-up-a-pristine-tar-branch","text":"Create a upstream/<version> branch with the content of the upstream file (usually a .tar.gz). Rename the upstream package to <package>_<version>.orig.tar.gz . Create and push the pristine-tar branch: pristine-tar commit <package>_<version>.orig.tar.gz upstream/<version> git push -u origin pristine-tar","title":"Setting up a pristine-tar branch"},{"location":"debian/building-a-package/#creating-the-git-build-package-configuration-file","text":"Create the file debian/gbp.conf with the following content: [DEFAULT] pristine-tar = True Commit and push the changes.","title":"Creating the Git Build Package configuration file"},{"location":"debian/building-a-package/#forward-patches-to-upstream","text":"Based on the Perl Team documentation: https://perl-team.pages.debian.net/forward.html Install Perl Team packaging tools: sudo apt install pkg-perl-tools Create the file debian/upstream/metadata with the following content: Name: <PROJECT NAME> Archive: GitHub Repository: https://github.com/<AUTHOR>/<REPO>.git Repository-Browse: https://github.com/<AUTHOR>/<REPO> Bug-Database: https://github.com/<AUTHOR>/<REPO>/issues Bug-Submit: https://github.com/<AUTHOR>/<REPO>/issues/new Create the file ~/.dpt.conf with the following content: DPT_GITHUB_ORGNAME=<ORGANIZATION NAME> DPT_GITHUB_OAUTH=<PERSONAL ACCESS TOKEN> DPT_GITHUB_BRANCH=pkg-debian-$(date +%s) To forward the patch just run: dpt forward debian/patches/<PATCH FILE>","title":"Forward patches to upstream"},{"location":"debian/building-a-package/#uploading-a-package","text":"In your host run the following command inside the package directory: sbuild -s -d unstable -c sid-amd64-sbuild --source-only-changes Sign the package: debsign <package>_<version>_source.changes Upload the package: dput <package>_<version>_source.changes","title":"Uploading a package"},{"location":"debian/building-a-package/#using-pdebuild","text":"If we just want to use pbuilder without sbuild we first create the base: sudo pbuilder create --mirror http://deb.debian.org/debian --distribution sid In order to install packages inside the chroot we can use: sudo pbuilder --login --save-after-login To build a package, from its source directory run: sudo pdebuild --use-pdebuild-internal This command places the binary in /var/cache/pbuilder/result . Finally, to obtain the source-only files: sudo pbuilder --build --source-only-changes <package>_<version>.dsc","title":"Using pdebuild"},{"location":"debian/listing-packages-from-a-given-origin/","text":"Listing packages from a given origin Just run: ORIGIN=deb-multimedia # For example dpkg -l | awk '/^.i/ {print $2}' | xargs apt-cache policy | awk '/^[a-z0-9.-]+:/ {pkg=$1}; /***/ {OFS=\"\\t\"; ver=$2; getline; print pkg,ver,$2,$3}'|grep -v /var/lib/dpkg/status| sed -e 's/://'|awk '{printf \"%-40s %-36s %-36s %-16s \\n\",$1,$2,$3, $4}' | grep -i $ORIGIN | cut -d\" \" -f1","title":"Listing packages from a given origin"},{"location":"debian/listing-packages-from-a-given-origin/#listing-packages-from-a-given-origin","text":"Just run: ORIGIN=deb-multimedia # For example dpkg -l | awk '/^.i/ {print $2}' | xargs apt-cache policy | awk '/^[a-z0-9.-]+:/ {pkg=$1}; /***/ {OFS=\"\\t\"; ver=$2; getline; print pkg,ver,$2,$3}'|grep -v /var/lib/dpkg/status| sed -e 's/://'|awk '{printf \"%-40s %-36s %-36s %-16s \\n\",$1,$2,$3, $4}' | grep -i $ORIGIN | cut -d\" \" -f1","title":"Listing packages from a given origin"},{"location":"debian/updating-a-package/","text":"Updating a package This document pretends to be a checklist of the tasks to perform when updating a Debian package. New upstream version Create a new branch upstream/<version> . Delete all the files in that branch. Download the last upstream release (i.e.: origtargz ). Uncompress the upstream file to the new branch. Merge the new branch with the development branch. Add the upstream package to the pristine-tar branch: General procedure Create a new entry to d/changelog : Make all the changes. Build the package (make sure you have downloaded the upstream package). Run Lintian to check the quality of the package. Run autopkgtest. Change UNRELEASED to unstable in d/changelog .","title":"Updating a package"},{"location":"debian/updating-a-package/#updating-a-package","text":"This document pretends to be a checklist of the tasks to perform when updating a Debian package.","title":"Updating a package"},{"location":"debian/updating-a-package/#new-upstream-version","text":"Create a new branch upstream/<version> . Delete all the files in that branch. Download the last upstream release (i.e.: origtargz ). Uncompress the upstream file to the new branch. Merge the new branch with the development branch. Add the upstream package to the pristine-tar branch:","title":"New upstream version"},{"location":"debian/updating-a-package/#general-procedure","text":"Create a new entry to d/changelog : Make all the changes. Build the package (make sure you have downloaded the upstream package). Run Lintian to check the quality of the package. Run autopkgtest. Change UNRELEASED to unstable in d/changelog .","title":"General procedure"},{"location":"multimedia/Useful-FFmpeg-and-mkvmerge-commands/","text":"Useful FFmpeg and mkvmerge commands Burning subtitles The output file could be in another format. SRT format In a .srt file: ffmpeg -i video.avi -vf subtitles=subtitle.srt out.avi From a video: ffmpeg -i video.mkv -vf subtitles=video.mkv out.avi ASS format ffmpeg -i video.avi -vf \"ass=subtitle.ass\" out.avi Extracting audio tracks The output file could be in another format. Extract the first track: ffmpeg -i input.avi -codec copy -map 0:a:0 -metadata TITLE=\"title\" out.mp3 Converting video to MKV The input file could be in another format. ffmpeg -i input_video.avi -f matroska -vcodec libx264 -acodec aac output_video.mkv Changing audio speed The input and output files could be in another format. Increase from the speed at 23.976fps to 25fps: ffmpeg -i test.mkv -filter:a \"atempo=1.0427083333333333\" -vn output.aac Changing video framerate mkvmerge -o out.mkv -A -S --default-duration '0:25fps' --fix-bitstream-timing-information 0 input.mkv","title":"Useful FFmpeg and mkvmerge commands"},{"location":"multimedia/Useful-FFmpeg-and-mkvmerge-commands/#useful-ffmpeg-and-mkvmerge-commands","text":"","title":"Useful FFmpeg and mkvmerge commands"},{"location":"multimedia/Useful-FFmpeg-and-mkvmerge-commands/#burning-subtitles","text":"The output file could be in another format.","title":"Burning subtitles"},{"location":"multimedia/Useful-FFmpeg-and-mkvmerge-commands/#srt-format","text":"In a .srt file: ffmpeg -i video.avi -vf subtitles=subtitle.srt out.avi From a video: ffmpeg -i video.mkv -vf subtitles=video.mkv out.avi","title":"SRT format"},{"location":"multimedia/Useful-FFmpeg-and-mkvmerge-commands/#ass-format","text":"ffmpeg -i video.avi -vf \"ass=subtitle.ass\" out.avi","title":"ASS format"},{"location":"multimedia/Useful-FFmpeg-and-mkvmerge-commands/#extracting-audio-tracks","text":"The output file could be in another format. Extract the first track: ffmpeg -i input.avi -codec copy -map 0:a:0 -metadata TITLE=\"title\" out.mp3","title":"Extracting audio tracks"},{"location":"multimedia/Useful-FFmpeg-and-mkvmerge-commands/#converting-video-to-mkv","text":"The input file could be in another format. ffmpeg -i input_video.avi -f matroska -vcodec libx264 -acodec aac output_video.mkv","title":"Converting video to MKV"},{"location":"multimedia/Useful-FFmpeg-and-mkvmerge-commands/#changing-audio-speed","text":"The input and output files could be in another format. Increase from the speed at 23.976fps to 25fps: ffmpeg -i test.mkv -filter:a \"atempo=1.0427083333333333\" -vn output.aac","title":"Changing audio speed"},{"location":"multimedia/Useful-FFmpeg-and-mkvmerge-commands/#changing-video-framerate","text":"mkvmerge -o out.mkv -A -S --default-duration '0:25fps' --fix-bitstream-timing-information 0 input.mkv","title":"Changing video framerate"},{"location":"multimedia/spliting-a-.flac-using-a-.cue/","text":"Spliting a .flac using a .cue Install the packages sudo apt install cuetools shntool flac Split the file shnsplit -f file.cue -t %n-%t -o flac file.flac","title":"Spliting a .flac using a .cue"},{"location":"multimedia/spliting-a-.flac-using-a-.cue/#spliting-a-flac-using-a-cue","text":"","title":"Spliting a .flac using a .cue"},{"location":"multimedia/spliting-a-.flac-using-a-.cue/#install-the-packages","text":"sudo apt install cuetools shntool flac","title":"Install the packages"},{"location":"multimedia/spliting-a-.flac-using-a-.cue/#split-the-file","text":"shnsplit -f file.cue -t %n-%t -o flac file.flac","title":"Split the file"},{"location":"security/debian-full-disk-encryption/","text":"Debian full disk encryption Partition scheme: Device Start End Sectors Size Type /dev/nvme0n1p1 2048 1050623 1048576 512M EFI System /dev/nvme0n1p2 1050624 1460223 409600 200M Linux filesystem /dev/nvme0n1p3 1460224 500118158 498657935 237.8G Linux filesystem Where the 2nd and 3rd partitions are encrypted using LUKS and the 3rd also has a LVM system Installing Debian The first step is to install Debian as usual until it asks to partition the disk. There, we have to create a 512M (or less) partition for EFI, a 200M one for /boot (ext4) and with the remaining space a crypt-luks one. Inside this last one we have to implement LVM . We can do it from the same Debian installer. Encrypting /boot Once Debian is installed (and we have done a /boot backup) we boot with a Live of, for example, Arch Linux, in order to encrypt the /boot partition. Format the /boot partition: cryptsetup luksFormat /dev/nvm0n1p2 Mount the partitions and chroot: cryptsetup open /dev/nvme0n1p3 cryptroot cryptsetup open /dev/nvme0n1p2 cryptboot mkfs.ext4 /dev/mapper/cryptboot mount /dev/ziggy/root /mnt mount /dev/mapper/cryptboot /mnt/boot mount /dev/nvme0n1p1 /mnt/boot/efi arch-chroot /mnt From now on, commands are executed inside the chroot. Load the PATH: source /etc/profile Enable support for encrypted GRUB editing /etc/default/grub : GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/nvme0n1p3:lvm\" GRUB_ENABLE_CRYPTODISK=y Edit /etc/crypttab : cryptboot UUID=<uuid-boot> none luks cryptroot UUID=<uuid-lvm> none luks Edit /etc/fstab : We comment the line that mounts /boot and we add: /dev/mapper/cryptboot /boot ext4 errors=remount-ro 0 1 Regenerate /boot : apt install --reinstall linux-image-4.9.0-8-amd64 # Or whatever version mkdir /boot/grub grub-mkconfig -o /boot/grub/grub.cfg grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=debian --recheck Now /boot is encrypted. We can get out from the chroot, umount partition and reboot the system. Bonus: Avoid having to introduce the password 4 times After this setup you have to introduce 4 times the password. Twice for GRUB (once for each partition) and twice to boot the kernel (also once for each partition). Kernel To solve the kernel problem, we can use a keyfile . We can generate it using dd : dd if=/dev/random of=/crypto_keyfile.bin bs=1 count=4096 cryptsetup luksAddKey /dev/nvme0n1p2 /crypto_keyfile.bin cryptsetup luksAddKey /dev/nvme0n1p3 /crypto_keyfile.bin chmod 000 /crypto_keyfile.bin chmod -R g-rwx,o-rwx /boot Edit /etc/crypttab : cryptboot UUID=<uuid-boot> /crypto_keyfile.bin luks,keyscript=/bin/cat cryptroot UUID=<uuid-lvm> /crypto_keyfile.bin luks,keyscript=/bin/cat Create the file /etc/initramfs-tools/hooks/crypto_keyfile: #!/bin/sh cp /crypto_keyfile.bin \"${DESTDIR}\" We give it execution permissions and we update initramfs: chmod +x /etc/initramfs-tools/hooks/crypto_keyfile update-initramfs -u Now, if we reboot the system it should only ask for GRUB's passphrase. GRUB GRUB asks to decrypt both partitions in order to load the backgroun image. I only see the GRUB screen a few seconds a day, so I don't care if I don't have a background image . I rather prefer having to introduce the passphrase just once . Remove execution permissions: chmod -x /etc/grub.d/05_debian_theme Update GRUB: update-grub And that's all. Other links Avoind having to reboot the computer when missing the passphrase (grub rescue): https://blog.stigok.com/post/decrypt-and-mount-luks-disk-from-grub-rescue-mode Solving error \"volume not found\": https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=671037 Sources https://wiki.archlinux.org/index.php/Dm-crypt/Encrypting_an_entire_system http://www.pavelkogan.com/2014/05/23/luks-full-disk-encryption/","title":"Debian full disk encryption"},{"location":"security/debian-full-disk-encryption/#debian-full-disk-encryption","text":"Partition scheme: Device Start End Sectors Size Type /dev/nvme0n1p1 2048 1050623 1048576 512M EFI System /dev/nvme0n1p2 1050624 1460223 409600 200M Linux filesystem /dev/nvme0n1p3 1460224 500118158 498657935 237.8G Linux filesystem Where the 2nd and 3rd partitions are encrypted using LUKS and the 3rd also has a LVM system","title":"Debian full disk encryption"},{"location":"security/debian-full-disk-encryption/#installing-debian","text":"The first step is to install Debian as usual until it asks to partition the disk. There, we have to create a 512M (or less) partition for EFI, a 200M one for /boot (ext4) and with the remaining space a crypt-luks one. Inside this last one we have to implement LVM . We can do it from the same Debian installer.","title":"Installing Debian"},{"location":"security/debian-full-disk-encryption/#encrypting-boot","text":"Once Debian is installed (and we have done a /boot backup) we boot with a Live of, for example, Arch Linux, in order to encrypt the /boot partition. Format the /boot partition: cryptsetup luksFormat /dev/nvm0n1p2 Mount the partitions and chroot: cryptsetup open /dev/nvme0n1p3 cryptroot cryptsetup open /dev/nvme0n1p2 cryptboot mkfs.ext4 /dev/mapper/cryptboot mount /dev/ziggy/root /mnt mount /dev/mapper/cryptboot /mnt/boot mount /dev/nvme0n1p1 /mnt/boot/efi arch-chroot /mnt From now on, commands are executed inside the chroot. Load the PATH: source /etc/profile Enable support for encrypted GRUB editing /etc/default/grub : GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/nvme0n1p3:lvm\" GRUB_ENABLE_CRYPTODISK=y Edit /etc/crypttab : cryptboot UUID=<uuid-boot> none luks cryptroot UUID=<uuid-lvm> none luks Edit /etc/fstab : We comment the line that mounts /boot and we add: /dev/mapper/cryptboot /boot ext4 errors=remount-ro 0 1 Regenerate /boot : apt install --reinstall linux-image-4.9.0-8-amd64 # Or whatever version mkdir /boot/grub grub-mkconfig -o /boot/grub/grub.cfg grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=debian --recheck Now /boot is encrypted. We can get out from the chroot, umount partition and reboot the system.","title":"Encrypting /boot"},{"location":"security/debian-full-disk-encryption/#bonus-avoid-having-to-introduce-the-password-4-times","text":"After this setup you have to introduce 4 times the password. Twice for GRUB (once for each partition) and twice to boot the kernel (also once for each partition).","title":"Bonus: Avoid having to introduce the password 4 times"},{"location":"security/debian-full-disk-encryption/#kernel","text":"To solve the kernel problem, we can use a keyfile . We can generate it using dd : dd if=/dev/random of=/crypto_keyfile.bin bs=1 count=4096 cryptsetup luksAddKey /dev/nvme0n1p2 /crypto_keyfile.bin cryptsetup luksAddKey /dev/nvme0n1p3 /crypto_keyfile.bin chmod 000 /crypto_keyfile.bin chmod -R g-rwx,o-rwx /boot Edit /etc/crypttab : cryptboot UUID=<uuid-boot> /crypto_keyfile.bin luks,keyscript=/bin/cat cryptroot UUID=<uuid-lvm> /crypto_keyfile.bin luks,keyscript=/bin/cat Create the file /etc/initramfs-tools/hooks/crypto_keyfile: #!/bin/sh cp /crypto_keyfile.bin \"${DESTDIR}\" We give it execution permissions and we update initramfs: chmod +x /etc/initramfs-tools/hooks/crypto_keyfile update-initramfs -u Now, if we reboot the system it should only ask for GRUB's passphrase.","title":"Kernel"},{"location":"security/debian-full-disk-encryption/#grub","text":"GRUB asks to decrypt both partitions in order to load the backgroun image. I only see the GRUB screen a few seconds a day, so I don't care if I don't have a background image . I rather prefer having to introduce the passphrase just once . Remove execution permissions: chmod -x /etc/grub.d/05_debian_theme Update GRUB: update-grub And that's all.","title":"GRUB"},{"location":"security/debian-full-disk-encryption/#other-links","text":"Avoind having to reboot the computer when missing the passphrase (grub rescue): https://blog.stigok.com/post/decrypt-and-mount-luks-disk-from-grub-rescue-mode Solving error \"volume not found\": https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=671037","title":"Other links"},{"location":"security/debian-full-disk-encryption/#sources","text":"https://wiki.archlinux.org/index.php/Dm-crypt/Encrypting_an_entire_system http://www.pavelkogan.com/2014/05/23/luks-full-disk-encryption/","title":"Sources"},{"location":"security/GPG/Generating-a-GPG-key/","text":"Generating a GPG key Install GnuPG sudo apt install gnupg dirmngr Increase security Edit the file ~/.gnupg/gpg.conf : require-cross-certification keyserver hkp://keys.gnupg.net # 32 bit IDs are too weak and have collisions keyid-format long personal-digest-preferences SHA512 cert-digest-algo SHA512 default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed no-emit-version no-comments personal-cipher-preferences AES AES256 AES192 CAST5 ignore-time-conflict allow-freeform-uid Generate a key Generate the key: gpg --full-gen-key # 4096 bits and SHA-2 hashing is recommended. Generate the revoking certificate: gpg --gen-revoke <KEY_ID> > ~/.gnupg/revoke-<KEY_ID>.crt Make our key public: gpg --send-key <KEY_ID> Signing and encrypting Sign: gpg -[a]s <FILE> -a \u2192 Armor: The output is in ASCII. -s \u2192 Sign: Signs the given text (ends with Ctrl-D) or a file. Encrypt: gpg -[a]e -r <ANOTHER_ID> <FILE> -e \u2192 Encrypt: Encrypts the given text (ends with Ctrl-D) or a file. -r \u2192 Recipient: The ID of the person who will receive the encrypted message. Subkeys Generating the subkeys Backup the ~/.gnupg directory: umask 077 && tar -cvzf ~/gnupg-backup-pre.tgz ~/.gnupg Edit our key: gpg --edit-key <KEY_ID> Add the subkey: gpg> addkey gpg> save Copying the subkeys Make a copy of the keyring: tar cvzf ~/gpg-backup-post.tgz ~/.gnupg Copy gpg-backup-post.tgz to an encrypted USB device. Delete both local backups: shred -u ~/gpg-backup-post.tgz ~/gpg-backup-pre.tgz Importing the subkeys The following commands are run in the laptop. cp /media/encrypted-usb ~/gpg-backup-post.tgz gpg --export-secret-subkeys <KEY_ID> > /media/encrypted-usb/subkeys gpg --delete-secret-key <KEY_ID> gpg --import /media/encrypted-usb/subkeys shred -u /media/encrypted-usb/subkeys We keep the backup of the master key in the encrypted USB device. Though, this device should be hidden somewhere.","title":"Generating a GPG key"},{"location":"security/GPG/Generating-a-GPG-key/#generating-a-gpg-key","text":"","title":"Generating a GPG key"},{"location":"security/GPG/Generating-a-GPG-key/#install-gnupg","text":"sudo apt install gnupg dirmngr","title":"Install GnuPG"},{"location":"security/GPG/Generating-a-GPG-key/#increase-security","text":"Edit the file ~/.gnupg/gpg.conf : require-cross-certification keyserver hkp://keys.gnupg.net # 32 bit IDs are too weak and have collisions keyid-format long personal-digest-preferences SHA512 cert-digest-algo SHA512 default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed no-emit-version no-comments personal-cipher-preferences AES AES256 AES192 CAST5 ignore-time-conflict allow-freeform-uid","title":"Increase security"},{"location":"security/GPG/Generating-a-GPG-key/#generate-a-key","text":"Generate the key: gpg --full-gen-key # 4096 bits and SHA-2 hashing is recommended. Generate the revoking certificate: gpg --gen-revoke <KEY_ID> > ~/.gnupg/revoke-<KEY_ID>.crt Make our key public: gpg --send-key <KEY_ID>","title":"Generate a key"},{"location":"security/GPG/Generating-a-GPG-key/#signing-and-encrypting","text":"Sign: gpg -[a]s <FILE> -a \u2192 Armor: The output is in ASCII. -s \u2192 Sign: Signs the given text (ends with Ctrl-D) or a file. Encrypt: gpg -[a]e -r <ANOTHER_ID> <FILE> -e \u2192 Encrypt: Encrypts the given text (ends with Ctrl-D) or a file. -r \u2192 Recipient: The ID of the person who will receive the encrypted message.","title":"Signing and encrypting"},{"location":"security/GPG/Generating-a-GPG-key/#subkeys","text":"","title":"Subkeys"},{"location":"security/GPG/Generating-a-GPG-key/#generating-the-subkeys","text":"Backup the ~/.gnupg directory: umask 077 && tar -cvzf ~/gnupg-backup-pre.tgz ~/.gnupg Edit our key: gpg --edit-key <KEY_ID> Add the subkey: gpg> addkey gpg> save","title":"Generating the subkeys"},{"location":"security/GPG/Generating-a-GPG-key/#copying-the-subkeys","text":"Make a copy of the keyring: tar cvzf ~/gpg-backup-post.tgz ~/.gnupg Copy gpg-backup-post.tgz to an encrypted USB device. Delete both local backups: shred -u ~/gpg-backup-post.tgz ~/gpg-backup-pre.tgz","title":"Copying the subkeys"},{"location":"security/GPG/Generating-a-GPG-key/#importing-the-subkeys","text":"The following commands are run in the laptop. cp /media/encrypted-usb ~/gpg-backup-post.tgz gpg --export-secret-subkeys <KEY_ID> > /media/encrypted-usb/subkeys gpg --delete-secret-key <KEY_ID> gpg --import /media/encrypted-usb/subkeys shred -u /media/encrypted-usb/subkeys We keep the backup of the master key in the encrypted USB device. Though, this device should be hidden somewhere.","title":"Importing the subkeys"},{"location":"security/GPG/Signing-commits-with-GPG/","text":"Signing commits with GPG You just need a GPG key. Please see Generating a GPG key for further details. git config --global gpg.program gpg2 # Set the binary to use git config --global user.signingkey IDCLAU # Set the user GPG key ID git config --global commit.gpgsign true # Always sign the commits In order to manually sign a commit: git commit -S -m \"Commit message\"","title":"Signing commits with GPG"},{"location":"security/GPG/Signing-commits-with-GPG/#signing-commits-with-gpg","text":"You just need a GPG key. Please see Generating a GPG key for further details. git config --global gpg.program gpg2 # Set the binary to use git config --global user.signingkey IDCLAU # Set the user GPG key ID git config --global commit.gpgsign true # Always sign the commits In order to manually sign a commit: git commit -S -m \"Commit message\"","title":"Signing commits with GPG"},{"location":"security/GPG/signing-party/","text":"Signing party Download the key. Check the fingerprint. Sign the key. Export and send the key. Assign trust. We'll be exploring two options. Option 1: By hand Download the key gpg --recv-keys <ANOTHER_ID> Check the fingerprint gpg --fingerprint <ANOTHER_ID> Sign the key gpg --sign-key <ANOTHER_ID> Export the key gpg --armor --export <ANOTHER_ID> | gpg --encrypt -r <ANOTHER_ID> --armor --output <ANOTHER_ID>-signedBy-<KEY_ID>.asc Then, send <ANOTHER_ID>-signedBy-<KEY_ID>.asc to the owner. Assign trust gpg --edit-key <ANOTHER_ID> gpg> trust gpg> save Import the key Once you receive your signed key you have to import it and make it public. gpg --import <KEY_ID>-signedBy-<ANOTHER_ID>.asc gpg --send-key <KEY_ID> Option 2: Using caff (^^) Install the needed packages sudo apt install signing-party msmtp Configure msmtp Encrypt your e-mail password: gpg --encrypt -o ~/.msmtp/bob.gpg -r <KEY_ID> - After typing your password press Enter and then Ctrl-D. Edit ~/.msmtprc : # Set default values for all following accounts. defaults auth on tls on tls_trust_file /etc/ssl/certs/ca-certificates.crt logfile ~/.msmtp.log account bob host mail.example.com port 587 from bob@example.com user bob@example.com passwordeval \"gpg --quiet --for-your-eyes-only --no-tty --decrypt ~/.msmtp/bob.gpg\" # Set a default account account default : bob You can try it with: msmtp <RECIPIENT_ADDRESS> Configure caff Edit ~/.caffrc : $CONFIG{'owner'} = 'Bob Morris'; $CONFIG{'email'} = 'bob@example.com'; $CONFIG{'keyid'} = [qw{<KEY_ID>}]; $ENV{'PERL_MAILERS'} = 'sendmail:/usr/bin/msmtp'; Edit ~/.caff/gnupghome/gpg.conf : personal-digest-preferences SHA512 cert-digest-algo SHA512 default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed Sign a key From now on, when you need to sign a key just run: caff <ANOTHER_ID> It will ask you if you want to sign the UIDs and if you want to e-mail the signed keys.","title":"Signing party"},{"location":"security/GPG/signing-party/#signing-party","text":"Download the key. Check the fingerprint. Sign the key. Export and send the key. Assign trust. We'll be exploring two options.","title":"Signing party"},{"location":"security/GPG/signing-party/#option-1-by-hand","text":"","title":"Option 1: By hand"},{"location":"security/GPG/signing-party/#download-the-key","text":"gpg --recv-keys <ANOTHER_ID>","title":"Download the key"},{"location":"security/GPG/signing-party/#check-the-fingerprint","text":"gpg --fingerprint <ANOTHER_ID>","title":"Check the fingerprint"},{"location":"security/GPG/signing-party/#sign-the-key","text":"gpg --sign-key <ANOTHER_ID>","title":"Sign the key"},{"location":"security/GPG/signing-party/#export-the-key","text":"gpg --armor --export <ANOTHER_ID> | gpg --encrypt -r <ANOTHER_ID> --armor --output <ANOTHER_ID>-signedBy-<KEY_ID>.asc Then, send <ANOTHER_ID>-signedBy-<KEY_ID>.asc to the owner.","title":"Export the key"},{"location":"security/GPG/signing-party/#assign-trust","text":"gpg --edit-key <ANOTHER_ID> gpg> trust gpg> save","title":"Assign trust"},{"location":"security/GPG/signing-party/#import-the-key","text":"Once you receive your signed key you have to import it and make it public. gpg --import <KEY_ID>-signedBy-<ANOTHER_ID>.asc gpg --send-key <KEY_ID>","title":"Import the key"},{"location":"security/GPG/signing-party/#option-2-using-caff","text":"","title":"Option 2: Using caff (^^)"},{"location":"security/GPG/signing-party/#install-the-needed-packages","text":"sudo apt install signing-party msmtp","title":"Install the needed packages"},{"location":"security/GPG/signing-party/#configure-msmtp","text":"Encrypt your e-mail password: gpg --encrypt -o ~/.msmtp/bob.gpg -r <KEY_ID> - After typing your password press Enter and then Ctrl-D. Edit ~/.msmtprc : # Set default values for all following accounts. defaults auth on tls on tls_trust_file /etc/ssl/certs/ca-certificates.crt logfile ~/.msmtp.log account bob host mail.example.com port 587 from bob@example.com user bob@example.com passwordeval \"gpg --quiet --for-your-eyes-only --no-tty --decrypt ~/.msmtp/bob.gpg\" # Set a default account account default : bob You can try it with: msmtp <RECIPIENT_ADDRESS>","title":"Configure msmtp"},{"location":"security/GPG/signing-party/#configure-caff","text":"Edit ~/.caffrc : $CONFIG{'owner'} = 'Bob Morris'; $CONFIG{'email'} = 'bob@example.com'; $CONFIG{'keyid'} = [qw{<KEY_ID>}]; $ENV{'PERL_MAILERS'} = 'sendmail:/usr/bin/msmtp'; Edit ~/.caff/gnupghome/gpg.conf : personal-digest-preferences SHA512 cert-digest-algo SHA512 default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed","title":"Configure caff"},{"location":"security/GPG/signing-party/#sign-a-key","text":"From now on, when you need to sign a key just run: caff <ANOTHER_ID> It will ask you if you want to sign the UIDs and if you want to e-mail the signed keys.","title":"Sign a key"},{"location":"security/SSH/SSH-fingerpint/","text":"SSH fingerprint To get the fingerprint from a server you just need to run: ssh-keygen -lf /etc/ssh/ssh_host_*_key.pub It will print the fingerprint of every key (in modern Linux systems: ECDSA, RSA and ed25519).","title":"SSH fingerprint"},{"location":"security/SSH/SSH-fingerpint/#ssh-fingerprint","text":"To get the fingerprint from a server you just need to run: ssh-keygen -lf /etc/ssh/ssh_host_*_key.pub It will print the fingerprint of every key (in modern Linux systems: ECDSA, RSA and ed25519).","title":"SSH fingerprint"},{"location":"security/SSH/Using-Yubikey/","text":"Using Yubikey We will be using a GPG key as a SSH one with the Yubikey. I guess that the Yubikey already contains a sign, an encrypt and an authorize subkeys. See the Yubikey official site for further details. Install some packages: sudo apt install gnupg2 pcscd scdaemon Edit ~/.gnupg/gpg-agent.conf : enable-ssh-support default-cache-ttl-ssh 10800 max-cache-ttl-ssh 10800 Edit ~/.bashrc : # Set SSH to use gpg-agent unset SSH_AGENT_PID if [ \"${gnupg_SSH_AUTH_SOCK_by:-0}\" -ne $$ ]; then export SSH_AUTH_SOCK=\"$(gpgconf --list-dirs agent-ssh-socket)\" fi # Set GPG TTY export GPG_TTY=$(tty) # Refresh gpg-agent tty in case user switches into an X session gpg-connect-agent updatestartuptty /bye >/dev/null To check if it works: ssh-add -L ssh-rsa AAAAB3NzaC ... pdqtlwX6m1 cardno:000123457915 # Output","title":"Using Yubikey"},{"location":"security/SSH/Using-Yubikey/#using-yubikey","text":"We will be using a GPG key as a SSH one with the Yubikey. I guess that the Yubikey already contains a sign, an encrypt and an authorize subkeys. See the Yubikey official site for further details. Install some packages: sudo apt install gnupg2 pcscd scdaemon Edit ~/.gnupg/gpg-agent.conf : enable-ssh-support default-cache-ttl-ssh 10800 max-cache-ttl-ssh 10800 Edit ~/.bashrc : # Set SSH to use gpg-agent unset SSH_AGENT_PID if [ \"${gnupg_SSH_AUTH_SOCK_by:-0}\" -ne $$ ]; then export SSH_AUTH_SOCK=\"$(gpgconf --list-dirs agent-ssh-socket)\" fi # Set GPG TTY export GPG_TTY=$(tty) # Refresh gpg-agent tty in case user switches into an X session gpg-connect-agent updatestartuptty /bye >/dev/null To check if it works: ssh-add -L ssh-rsa AAAAB3NzaC ... pdqtlwX6m1 cardno:000123457915 # Output","title":"Using Yubikey"},{"location":"server/iptables/","text":"iptables cheatsheet List rules sudo iptables -L Flush rules sudo iptables -F Block ports Keep established connections sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT -A adds the rule. INPUT defines the rule as part of the input string. -m conntrack with --ctstate ESTABLISHED,RELATED ensures that only applies to established and related connections. -j ACCEPT accepts the packages. Accept desired ports sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT sudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT -p sets the connection protocol. --dport sets the connection port. Block other connections sudo iptables -P INPUT DROP Allow loopback connections sudo iptables -I INPUT 1 -i lo -j ACCEPT -I INPUT 1 places the rule first in the table. -i lo loopback interface. Saving the rules sudo apt install iptables-persistent sudo iptables-save > /etc/iptables/rules.v4","title":"iptables cheatsheet"},{"location":"server/iptables/#iptables-cheatsheet","text":"","title":"iptables cheatsheet"},{"location":"server/iptables/#list-rules","text":"sudo iptables -L","title":"List rules"},{"location":"server/iptables/#flush-rules","text":"sudo iptables -F","title":"Flush rules"},{"location":"server/iptables/#block-ports","text":"","title":"Block ports"},{"location":"server/iptables/#keep-established-connections","text":"sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT -A adds the rule. INPUT defines the rule as part of the input string. -m conntrack with --ctstate ESTABLISHED,RELATED ensures that only applies to established and related connections. -j ACCEPT accepts the packages.","title":"Keep established connections"},{"location":"server/iptables/#accept-desired-ports","text":"sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT sudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT -p sets the connection protocol. --dport sets the connection port.","title":"Accept desired ports"},{"location":"server/iptables/#block-other-connections","text":"sudo iptables -P INPUT DROP","title":"Block other connections"},{"location":"server/iptables/#allow-loopback-connections","text":"sudo iptables -I INPUT 1 -i lo -j ACCEPT -I INPUT 1 places the rule first in the table. -i lo loopback interface.","title":"Allow loopback connections"},{"location":"server/iptables/#saving-the-rules","text":"sudo apt install iptables-persistent sudo iptables-save > /etc/iptables/rules.v4","title":"Saving the rules"},{"location":"server/unattended-upgrades/","text":"Unattended Upgrades unattended-upgrades is a package that allows to perform automatic system upgrades. A very simple configuration is shown below. Install the package: sudo apt install unattended-upgrades Edit the file /etc/apt/apt.conf.d/20auto-upgrades : // Enable the update/upgrade script (0=disable) APT::Periodic::Enable \"1\"; // Do \"apt-get update\" automatically every n-days (0=disable) APT::Periodic::Update-Package-Lists \"1\"; // Do \"apt-get upgrade --download-only\" every n-days (0=disable) APT::Periodic::Download-Upgradeable-Packages \"1\"; // Run the \"unattended-upgrade\" security upgrade script // every n-days (0=disabled) // Requires the package \"unattended-upgrades\" and will write // a log in /var/log/unattended-upgrades APT::Periodic::Unattended-Upgrade \"1\"; // Do \"apt-get autoclean\" every n-days (0=disable) APT::Periodic::AutocleanInterval \"7\"; Uncomment some lines in /etc/apt/apt.conf.d/50unattended-upgrades : \"o=Debian,a=stable\"; \"o=Debian,a=stable-updates\"; //\"o=Debian,a=proposed-updates\"; \"origin=Debian,codename=${distro_codename},label=Debian-Security\"; Restart the service: sudo systemctl restart unattended-upgrades","title":"Unattended Upgrades"},{"location":"server/unattended-upgrades/#unattended-upgrades","text":"unattended-upgrades is a package that allows to perform automatic system upgrades. A very simple configuration is shown below. Install the package: sudo apt install unattended-upgrades Edit the file /etc/apt/apt.conf.d/20auto-upgrades : // Enable the update/upgrade script (0=disable) APT::Periodic::Enable \"1\"; // Do \"apt-get update\" automatically every n-days (0=disable) APT::Periodic::Update-Package-Lists \"1\"; // Do \"apt-get upgrade --download-only\" every n-days (0=disable) APT::Periodic::Download-Upgradeable-Packages \"1\"; // Run the \"unattended-upgrade\" security upgrade script // every n-days (0=disabled) // Requires the package \"unattended-upgrades\" and will write // a log in /var/log/unattended-upgrades APT::Periodic::Unattended-Upgrade \"1\"; // Do \"apt-get autoclean\" every n-days (0=disable) APT::Periodic::AutocleanInterval \"7\"; Uncomment some lines in /etc/apt/apt.conf.d/50unattended-upgrades : \"o=Debian,a=stable\"; \"o=Debian,a=stable-updates\"; //\"o=Debian,a=proposed-updates\"; \"origin=Debian,codename=${distro_codename},label=Debian-Security\"; Restart the service: sudo systemctl restart unattended-upgrades","title":"Unattended Upgrades"},{"location":"server/KVM/NAT-script/","text":"KVM NAT script Create the file /etc/libvirt/hooks/qemu : #!/bin/bash # # Adaptat de l'orginal disponible a: # http://wiki.libvirt.org/page/Networking#Forwarding_Incoming_Connections # DEBUG=\"/etc/libvirt/hooks/qemu: $0 $*\" logger \"$DEBUG\" echo \"$DEBUG\" Guest_name=\"${1}\" VIRSH_CMD=\"${2}\" PUBLIC_IP=\"192.168.1.30\" # afegir linies al final amb els redireccionaments. redirecciona() { Host_port=\"${1}\" Guest_ipaddr=\"${2}\" Guest_port=\"${3}\" Protocol=\"${4}\" if [ \"$VIRSH_CMD\" = \"stopped\" -o \"$VIRSH_CMD\" = \"reconnect\" ]; then iptables -t nat -D PREROUTING -d ${PUBLIC_IP} -p ${Protocol} --dport ${Host_port} -j DNAT \\ --to ${Guest_ipaddr}:${Guest_port} iptables -D FORWARD -d ${Guest_ipaddr}/32 -p ${Protocol} -m state --state NEW \\ -m ${Protocol} --dport ${Guest_port} -j ACCEPT fi if [ \"$VIRSH_CMD\" = \"start\" -o \"$VIRSH_CMD\" = \"reconnect\" ]; then iptables -t nat -A PREROUTING -d ${PUBLIC_IP} -p ${Protocol} --dport ${Host_port} -j DNAT \\ --to ${Guest_ipaddr}:${Guest_port} iptables -I FORWARD -d ${Guest_ipaddr}/32 -p ${Protocol} -m state --state NEW \\ -m ${Protocol} --dport ${Guest_port} -j ACCEPT fi } # afegir el case de cada equip, i a dins una linia per cada servei. # redirecciona <host_port> <guest_address> <guest_port> <protocol> case \"$Guest_name\" in vm1) redirecciona 2210 192.168.122.77 2210 tcp redirecciona 25826 192.168.122.77 25826 udp ;; vm2) redirecciona 2220 192.168.122.98 2220 tcp ;; esac Set exec permissions: chmod +x /etc/libvirt/hooks/qemu Edit /etc/apparmor.d/usr.sbin.libvirtd under the line /usr/sbin/* PUx, : /etc/libvirt/hooks/* PUx,","title":"KVM NAT script"},{"location":"server/KVM/NAT-script/#kvm-nat-script","text":"Create the file /etc/libvirt/hooks/qemu : #!/bin/bash # # Adaptat de l'orginal disponible a: # http://wiki.libvirt.org/page/Networking#Forwarding_Incoming_Connections # DEBUG=\"/etc/libvirt/hooks/qemu: $0 $*\" logger \"$DEBUG\" echo \"$DEBUG\" Guest_name=\"${1}\" VIRSH_CMD=\"${2}\" PUBLIC_IP=\"192.168.1.30\" # afegir linies al final amb els redireccionaments. redirecciona() { Host_port=\"${1}\" Guest_ipaddr=\"${2}\" Guest_port=\"${3}\" Protocol=\"${4}\" if [ \"$VIRSH_CMD\" = \"stopped\" -o \"$VIRSH_CMD\" = \"reconnect\" ]; then iptables -t nat -D PREROUTING -d ${PUBLIC_IP} -p ${Protocol} --dport ${Host_port} -j DNAT \\ --to ${Guest_ipaddr}:${Guest_port} iptables -D FORWARD -d ${Guest_ipaddr}/32 -p ${Protocol} -m state --state NEW \\ -m ${Protocol} --dport ${Guest_port} -j ACCEPT fi if [ \"$VIRSH_CMD\" = \"start\" -o \"$VIRSH_CMD\" = \"reconnect\" ]; then iptables -t nat -A PREROUTING -d ${PUBLIC_IP} -p ${Protocol} --dport ${Host_port} -j DNAT \\ --to ${Guest_ipaddr}:${Guest_port} iptables -I FORWARD -d ${Guest_ipaddr}/32 -p ${Protocol} -m state --state NEW \\ -m ${Protocol} --dport ${Guest_port} -j ACCEPT fi } # afegir el case de cada equip, i a dins una linia per cada servei. # redirecciona <host_port> <guest_address> <guest_port> <protocol> case \"$Guest_name\" in vm1) redirecciona 2210 192.168.122.77 2210 tcp redirecciona 25826 192.168.122.77 25826 udp ;; vm2) redirecciona 2220 192.168.122.98 2220 tcp ;; esac Set exec permissions: chmod +x /etc/libvirt/hooks/qemu Edit /etc/apparmor.d/usr.sbin.libvirtd under the line /usr/sbin/* PUx, : /etc/libvirt/hooks/* PUx,","title":"KVM NAT script"},{"location":"server/web/apache-redirect-non-www-to-www/","text":"Redirecting non-www to www with .htaccess To redirect a non www site to a www site we can do it with .htaccess : RewriteEngine On RewriteCond %{HTTP_HOST} !^www\\. RewriteRule ^(.*)$ http://www.%{HTTP_HOST}/$1 [R=301,L] HTTPS: RewriteEngine On RewriteCond %{HTTPS} off RewriteRule .* https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301] RewriteCond %{HTTP_HOST} !^www\\. [NC] RewriteRule .* https://www.%{HTTP_HOST}%{REQUEST_URI} [L,R=301]","title":"Redirecting non-www to www with .htaccess"},{"location":"server/web/apache-redirect-non-www-to-www/#redirecting-non-www-to-www-with-htaccess","text":"To redirect a non www site to a www site we can do it with .htaccess : RewriteEngine On RewriteCond %{HTTP_HOST} !^www\\. RewriteRule ^(.*)$ http://www.%{HTTP_HOST}/$1 [R=301,L] HTTPS: RewriteEngine On RewriteCond %{HTTPS} off RewriteRule .* https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301] RewriteCond %{HTTP_HOST} !^www\\. [NC] RewriteRule .* https://www.%{HTTP_HOST}%{REQUEST_URI} [L,R=301]","title":"Redirecting non-www to www with .htaccess"},{"location":"server/web/certbot-reverse-proxy/","text":"Let's Encrypt on a reverse proxy Brief notes about the problems found when configuring Let's Encrypt (Certbot) with a reverse proxy and different machines. Renewal files are located in /etc/letsencrypt/renewal . Virtualhosts in the same machine Nothing special, just use Certbot webroot renew. Configuration example: # renew_before_expiry = 30 days version = <VERSION> archive_dir = /etc/letsencrypt/archive/example.com cert = /etc/letsencrypt/live/example.com/cert.pem privkey = /etc/letsencrypt/live/example.com/privkey.pem chain = /etc/letsencrypt/live/example.com/chain.pem fullchain = /etc/letsencrypt/live/example.com/fullchain.pem # Options used in the renewal process [renewalparams] authenticator = webroot installer = None account = <ACCOUNT> [[webroot_map]] www.example.com = /var/www/example.com example.com = /var/www/example.com Generating certs In the host machine: sudo certbot certonly -w /var/www/example.com/ -d example.com -d www.example.com Actually, this order will create the renewal file. Virtualhosts in another machine First we need to create a subdomain pointing to the device that has the reverse proxy installed. The root for this domain is /var/www/example . Taking that into account, the renewal file: # renew_before_expiry = 30 days version = <VERSION> archive_dir = /etc/letsencrypt/archive/example.com cert = /etc/letsencrypt/live/example.com/cert.pem privkey = /etc/letsencrypt/live/example.com/privkey.pem chain = /etc/letsencrypt/live/example.com/chain.pem fullchain = /etc/letsencrypt/live/example.com/fullchain.pem # Options used in the renewal process [renewalparams] authenticator = webroot installer = None account = <ACCOUNT> [[webroot_map]] www.example.com = /var/www/machine blog.example.com = /var/www/machine example.com = /var/www/machine machine.example.com = /var/www/machine Now we have two options: Option 1 Add a line in the .htaccess where the web is located: Redirect 301 /.well-known http://machine.example.com/.well-known Option 2 (^^) Modify the nginx site in the reverse proxy server: location ^~ /.well-known/acme-challenge/ { root /var/www/machine; } Generating certs In the host machine: sudo certbot certonly -w /var/www/machine/ -d example.com -d www.example.com -d blog.example.com -d machine.example.com Actually, this order will create the renewal file.","title":"Let's Encrypt on a reverse proxy"},{"location":"server/web/certbot-reverse-proxy/#lets-encrypt-on-a-reverse-proxy","text":"Brief notes about the problems found when configuring Let's Encrypt (Certbot) with a reverse proxy and different machines. Renewal files are located in /etc/letsencrypt/renewal .","title":"Let's Encrypt on a reverse proxy"},{"location":"server/web/certbot-reverse-proxy/#virtualhosts-in-the-same-machine","text":"Nothing special, just use Certbot webroot renew. Configuration example: # renew_before_expiry = 30 days version = <VERSION> archive_dir = /etc/letsencrypt/archive/example.com cert = /etc/letsencrypt/live/example.com/cert.pem privkey = /etc/letsencrypt/live/example.com/privkey.pem chain = /etc/letsencrypt/live/example.com/chain.pem fullchain = /etc/letsencrypt/live/example.com/fullchain.pem # Options used in the renewal process [renewalparams] authenticator = webroot installer = None account = <ACCOUNT> [[webroot_map]] www.example.com = /var/www/example.com example.com = /var/www/example.com","title":"Virtualhosts in the same machine"},{"location":"server/web/certbot-reverse-proxy/#generating-certs","text":"In the host machine: sudo certbot certonly -w /var/www/example.com/ -d example.com -d www.example.com Actually, this order will create the renewal file.","title":"Generating certs"},{"location":"server/web/certbot-reverse-proxy/#virtualhosts-in-another-machine","text":"First we need to create a subdomain pointing to the device that has the reverse proxy installed. The root for this domain is /var/www/example . Taking that into account, the renewal file: # renew_before_expiry = 30 days version = <VERSION> archive_dir = /etc/letsencrypt/archive/example.com cert = /etc/letsencrypt/live/example.com/cert.pem privkey = /etc/letsencrypt/live/example.com/privkey.pem chain = /etc/letsencrypt/live/example.com/chain.pem fullchain = /etc/letsencrypt/live/example.com/fullchain.pem # Options used in the renewal process [renewalparams] authenticator = webroot installer = None account = <ACCOUNT> [[webroot_map]] www.example.com = /var/www/machine blog.example.com = /var/www/machine example.com = /var/www/machine machine.example.com = /var/www/machine Now we have two options:","title":"Virtualhosts in another machine"},{"location":"server/web/certbot-reverse-proxy/#option-1","text":"Add a line in the .htaccess where the web is located: Redirect 301 /.well-known http://machine.example.com/.well-known","title":"Option 1"},{"location":"server/web/certbot-reverse-proxy/#option-2","text":"Modify the nginx site in the reverse proxy server: location ^~ /.well-known/acme-challenge/ { root /var/www/machine; }","title":"Option 2 (^^)"},{"location":"server/web/certbot-reverse-proxy/#generating-certs_1","text":"In the host machine: sudo certbot certonly -w /var/www/machine/ -d example.com -d www.example.com -d blog.example.com -d machine.example.com Actually, this order will create the renewal file.","title":"Generating certs"},{"location":"server/web/wordpress-reverse-proxy/","text":"Wordpress reverse proxy When using a nginx reverse proxy to Apache and accessing the Wordpress site using HTTPS it returns a Redirect Error . Adding some lines to wp-config.php fixes it. After the line define('WP_DEBUG', false) add: // Reverse proxy patch if ( $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https' ) { $_SERVER['HTTPS'] = 'on'; $_SERVER['SERVER_PORT'] = 443; }","title":"Wordpress reverse proxy"},{"location":"server/web/wordpress-reverse-proxy/#wordpress-reverse-proxy","text":"When using a nginx reverse proxy to Apache and accessing the Wordpress site using HTTPS it returns a Redirect Error . Adding some lines to wp-config.php fixes it. After the line define('WP_DEBUG', false) add: // Reverse proxy patch if ( $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https' ) { $_SERVER['HTTPS'] = 'on'; $_SERVER['SERVER_PORT'] = 443; }","title":"Wordpress reverse proxy"}]}